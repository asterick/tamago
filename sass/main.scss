$padding-small: 2px;
$padding-wide: 10px;

body {
	background: $white;
	font-family: monospace;
}

tamago[debugger] {
	display: block;

	position: relative;
	color: $black;

	column {
		display: inline-block;
	}

	buttons {
		display: block;
		text-align: center;
	}

	display {
		text-align: center;
		display: block;

		padding: 20px;

		canvas {
			border: 2px solid $pink;
			display: inline-block;
			background: $light-grey;

			width: 128px;
			height: 64px;
		}
	}

	cpu {
		display: block;

		registers {
			width: 28ex;
			display: block;
			padding: $padding-wide;

			&:before {
				content: "Registers";
				display: block;
			}

			register {
				display: inline-block;

				&:before {
					display: inline-block;
					text-align: right;
					content: attr(name);
					width:	 32px;
					padding: $padding-small $padding-wide;
				}
			}
		}
		flags {
			display: block;
			padding: $padding-wide;

			&:before {
				content: "Flags";
				display: block;
			}

			flag {
				display: inline-block;
				position: relative;
				min-width: 16px;
				padding: $padding-small;

				&:after {
					@include icon-FontAwesome();
					content: $check-empty;
					display:block;
				}
				&.active:after {
					content: $check;
				}

				&:before {
					text-align: center;
					content: attr(name);
					display:block;
				}
			}
		}
	}

	disassembly {
		display: block;
		overflow: hidden;

		instruction {
			display: block;
			position: relative;
			min-width: 80ex;
			height: 1em;

			&.active {
				background: $green;
			}

			location {
				color: $bright-orange;
				display: inline-block;
				width: 4ex;
				padding: 0 1ex;
			}
			opcode {
				color: $blue-green-2;
				display: inline-block;
				width: 3ex;
				padding: 0 1ex;
			}

			data {
				display: inline-block;
				width: 16ex;
				color: $purple;
			}

			addressing {
				color: $blue-2;
				display: inline-block;
				width: 16ex;

				// Prefix immediate values
				&:before, &:after {
					color: $red-2;
					display: inline;
				}

				&[mode=immediate], &[mode=absolute], &[mode=absoluteX], &[mode=absoluteY], &[mode=zeropage], &[mode=zeropageX], &[mode=zeropageY] {
					&:before { content: "$"; }
				}

				&[mode=indirect], &[mode=indirectX], &[mode=indirectY] {
					&::before { content: "(" }
				}
				&[mode=indirect]:after {
					content: ")"
				}

				&[mode=relative]:after {
					content: " ;" attr(address);
				}

				&[mode=indirectX]:after {
					content: ", X)"
				}
				&[mode=indirectY]:after {
					content: ", Y)"
				}

				&[mode=zeropageX]:after, &[mode=absoluteX]:after {
					content: ", X"
				}
				&[mode=zeropageY]:after, &[mode=absoluteY]:after {
					content: ", Y"
				}

				// THIS NEEDS TO BE DONE
				&[mode=relative] {}
			}

			&[port]:after {
				color: $green-2;
				content: "; " attr(port);
				text-align: left;
			}

			&:nth-child(even) {
				background: $white;
			}
			&:nth-child(odd) {
				background: $light-grey;
			}
			&.active {
				background: $yellow;
			}
		}
	}

	memory {
		height: 50em;
	}

	control {
		height: 24em;
	}

	memory, control {
		display: block;
		overflow-y: scroll;

		row {
			height: 1em;
			display: block;
			
			&:nth-child(even) {
				background: $white;
			}
			&:nth-child(odd) {
				background: $light-grey;
			}

			address {
				display: inline-block;
				width:	36px;
				text-align: center;
			}
			byte {
				display: inline-block;
				text-align: center;
				min-width: 2ex;
				padding: 0;
				margin: 0;

				&:nth-child(even) {
					color: $blue-2;
				}
				&:nth-child(odd) {
					color: $blue;
				}

				&.read { background: $red-2; color: $white; }
				&.write { background: $green-2; color: $white; }
				&.read.write { background: $yellow-2; color: $white; }
			}
		}
	}
}
